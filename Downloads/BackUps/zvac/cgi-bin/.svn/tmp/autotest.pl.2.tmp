#!/usr/bin/perl
print "Content-type: text/html\r\n\r\n";
use strict;
use utf8;
use Data::Dumper;
use File::Path qw(remove_tree);

my $CMD = '/home/autobuild/autoclassifier-autotest-launch ';
my $SVN_PATH = 'svn+ssh://autobuild@svn/TPTDev/AutoClassifier/';
## STORE THE POST METHOD IN A HASH 
my ($buffer, @pairs, $pair, $name, $value, %POST);
# Read in text
$ENV{'REQUEST_METHOD'} =~ tr/a-z/A-Z/; 
if ($ENV{'REQUEST_METHOD'} eq "POST")
{
	read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
}else {
	$buffer = $ENV{'QUERY_STRING'};
}
# Split information into name/value pairs
@pairs = split(/&/, $buffer);
foreach $pair (@pairs)
{
	($name, $value) = split(/=/, $pair);
	$value =~ tr/+/ /;
	$value =~ s/%(..)/pack("C", hex($1))/eg;
	$POST{$name} = $value;
}

## END of Preprocessing ##
sub footer {
	print '
	</div>
	</body>
	</html>';
} 

sub header {
	print '
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Launch Autotest</title>
	</head>
	';
}

sub error {
	my $msg = shift;

	print '
	<div id = "error" style ="color:red;">
	<h4 style ="color:red;">'. $msg. '</h4>
	</div>';
}
sub success {
	my $msg = shift;

	print '
	<div id = "success" style ="color:green;">
	<h4 style ="color:green;">'. $msg. '</h4>
	</div>';
}

sub display {
	my $msg = shift;

	print '
	<div id = "display" style ="color:black;">
	<h5 style ="color:black;">'. $msg. '</h5>
	</div>';
}

sub validate_revision {

	my $branch = $POST{'branch'};
	if($branch ne 'trunk') {
		$branch = "branches/$branch";
	}
	my $cmd = "svn log -r$POST{'revision'} $SVN_PATH$branch \n";
	my @line = `$cmd`;

	return @line;
}

sub get_samples() {
	my $out = `ls /home/autobuild/AutoClassifierTest/samples`;
	my @samples = split("\n", $out);
	return \@samples;
}


header();

# Validating the fields
my @required_fields = qw(branch revision reason);
foreach my $field (@required_fields) {
	if (!$POST{$field}) {
		error("Required entry on $field");
		exit;
	}
}
if ($POST{'revision'} !~ /^\d+$/) {
	error("Revision should be an integer: `$POST{'after_time_value'}`");
	exit;
}
if ($POST{'after_time_value'} !~ /^\d+$/) {
	error("Time should be an integer: `$POST{'after_time_value'}`");
	exit;
}

if($POST{'reason'} =~ m/\s/) {
	error("Reason should not contain whitespace: `$POST{reason}'");
	exit;
}

# If the line output is less than 2, it means no existing revision
if (validate_revision() < 2) {
	error("Revision number does not exist: `$POST{revision}`");
	exit;
}

<<<<<<< .working
=======
# Check if has the same version of perl library
if (!check_zvelo_libraries()) {
	error("Perl libraries are not synced.");
	exit;
} 

# Populating the test samples base on the options
remove_tree('/home/autobuild/AutoClassifierTest/ac_test_samples.txt');
my $samples = get_samples();
foreach my $sample (@$samples) {
	if( exists $POST{"sample_$sample"} ) {
		system("cat /home/autobuild/AutoClassifierTest/samples/$sample >> /home/autobuild/AutoClassifierTest/ac_test_samples.txt");
	}
}

>>>>>>> .merge-right.r16288

# Building the command line
$CMD .= $POST{branch} . " " . $POST{revision} . " " . $POST{reason};
if(!$POST{svn_update}) { 
	$CMD .= " -U";
}
if(!$POST{build_repos}) {
	$CMD .= " -R";
}
if(!$POST{weighted_terms}) {
	$CMD .= " -W";
}
if(!$POST{content_rating}) {
	$CMD .= " -C";
}
if(!$POST{link_analyzer}) {
	$CMD .= " -L";
}
if(!$POST{toaster}) {
	$CMD .= " -T";
}

# Build the 'at' commands
my $CMD_AT = "ssh autobuild\@wa-dev at now";
if($POST{'after_time_value'}) {
	$CMD_AT .= " + $POST{after_time_value} $POST{after_time}";
}

$CMD = "ssh autobuild\@wa-dev '$CMD'";

system("echo \"$CMD\" | $CMD_AT");

if ($? == -1 ) {
	error("Command failed: $!\n");
} else {
	# Display the list of job queue
	my @jobs = `ssh autobuild\@wa-dev at -l`;
	success("Job queue successful:");
	foreach (@jobs) {
		display($_);
	}
}
footer();
1;
